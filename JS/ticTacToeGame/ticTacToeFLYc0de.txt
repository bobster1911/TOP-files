Plans for ticTacToe
===================

Current Focus: 
==============
- Generating board from array []
- creating players []
- changing state of board []
- buttons for setting up game variables/parameters []
- rendering visuals from the gameBoard object => displayController object []

DRAFT THOUGHTS
==============

How will the array render live for the game to be played?
	- Change the properties of the object
	- Render based on the same object it used originally

	1. cell is clicked
	2. array is updated in object
	3. function that generates the board is called and reading the new object, generates the latest version of the game board
	

Flow of program
===============

1. press start
	- 
2. select number of players
	- Player factory function called to create the appropriate number of players and in turn name them.
3. select symbol
4. board is generated and game starts
	- create a div for each cell within a containing div for the board itself.
	- associate each cell div with the array items in gameBoard object.
	- randomly select which player goes first and then alternate from then on.
	- 
5. players alternate moves until 3 in a row or all the spaces are filled
6. message declares winner or that the game was a draw
7. option to play another game whilst retaining the scores
	- after 3 games in a row the best of 3 is announced and program takes users back to the main menu.

OBJECTS
=======

- gameBoard
	- will have a function for each of the two kinds of games; 1 or 2 player.
	- keep track of:
		- who's turn it is
		- score of the games played 
		- which cells have been selected 

- displayController
	- gameBoard object as prototype*
	- 
- players - factory function to generate 1-2 players (maybe the AI also, will need to think more about that after I get the 
	two player version of the game working.
	- Properties: name, symbol, (rng number for choosing who goes first?)




Functions:

	- button/cell becomes unclickable after changed to O or X

		> if 0 => (playerClicking (this.player)?) {
			if (playerClicking.symbol == 'O') {
				// corresponding array item == symbol
				// change class to unclickable button.

			}; else if (playerClicking.symbol == 'X') {
				// corresponding array item == symbol
				// change class to unclickable button.

			}; else {

				// find what a good worse case scenario is for when main parameters are not met
				// are not met and the program throws an unexpected error.
			};

		  else {
			// do nothing
			// generate message or sound along lines of "this spot has already been selected"
		};
			

QUESTIONS**
=========
- if a prototype is changed, does it affect the objects that inherit said prototype?
- 
